 import SwiftUI

struct BULBView: View {

@Stateobject var bULBViewModel = BULBViewModel()

@Environment(\.presentationMode) var presentationMode: Binding PresentationMode>

var, body: some View {

VStack, {

VStack {

HStack {

HStack {

ZStack {

Button(action: {}, label: {

Image("img_group_26")

})

.frame(width: getRelativeWidth(50.0), height: getRelativeWidth(50.0),

alignment: .center)

background (RoundedCorners (topLeft: 25.0, topRight: 25.0, bottomLeft: 25.0, bottomRight: 25.0)

fill(LinearGradient(gradient: Gradient(colors: [ColorConstants

.Gray7007f,

ColorConstants

Gray9007f]), startPoint: .topLeading, endPoint: .bottomTrailing)))

padding(.all, getRelativeWidth(6.0)) padding(,vertical, getRelativeHeight(6.0))

padding(.horizontal, getRelativeWidth(6.0))

}

hideNavigationBar()

.frame(width: getRelativeWidth(62.0), height: getRelativewidth(62.0),

alignment: center)
background (RoundedCorners (topLeft: 31.0, topRight: 31.0, bottomLeft: 31.0 bottomRight: 31.0)

Fill(LinearGradient(gradient: Gradient(colors: [ColorConstants Gray70002,

ColorConstants

Gray900]),

startPoint: topLeading, endPoint: .bottomTrailing)))

shadow(color: ColorConstants.Black9003f, radius: 20, x: 10, y: 10)

Button(action: {}, label:

Image("img-profil_button")

})

frame(width: getRelativeWidth(62.0), height: getRelativeWidth(62.0), alignment: .center)

padding(.leading, getRelativewidth(186.0))

frame(width: getRelativeWidth(310.0), height: getRelativeHeight(62.0), alignment: .leading)

padding(.horizontal, getRelativeWidth(40.0))

}

frame(width: UIScreen.main.bounds.width alignment: leading) 20, height: getRelativeHeight(62.0),

VStack {

ZStack(alignment: center) {

Text(StringConstants.kLblBulb)

font(FontScheme,kPoppinsBold(size: getRelativeHeight(25.0)))

fontweight(.bold)

foregroundColor(ColorConstants.WhiteA700)

minimumScaleFactor (0.5)

multilineTextAlignment(.leading)

frame (width: getRelativeWidth(61.0), height: getRelativeHeight(38.0)
 hideNavigationBar()

frame(width: getRelativeWidth(164.0), height: getRelativeWidth(164.0), alignment: .center)

padding(.top, getRelativeHeight(30.0))

Text("spacer").

minimumScaleFactor (0.5)

multilineTextAlignment(.leading)

frame(width: getRelativeWidth(256.0), height: getRelativeHeight(133.0))

HStack {

Image("img loader")

.resizable()

frame(width: getRelativeWidth(34.0), height: getRelativeHeight(35.0), alignment: .center)

.scaledToFit()

.clipped()

ZStack(alignment:.leading) {

Divider()

frame(width: getRelativeWidth(208.0),

height: getRelativeHeight(4.0), alignment: .center)

background(ColorConstants.WhiteA700)

padding(.top, getRelativeHeight(15.5))

padding(,leading, getRelativeWidth(8.38))

Image("img minus_square")

Cresizable()

frame(width: getRelativeWidth(37.0),

scaledToFit()

height: getRelativeHeight(31.0), alignment:..center)

clipped()

padding(,trailing, getRelativeWidth(179.0))
startPoint: topLeading, endPoint: .bottomTrailing); linewidth: 1))

background (RoundedCorners (topLeft: 40.0, topRight: 40.0, bottomleft: 40:0

14 bottomRight: 40.0)

fill(ColorConstants.Gray30038))

shadow(radius: 40)

.padding(.bottom, getRelativeHeight(54.0))

padding(.horizontal, getRelativeWidth(51.0))

}

frame(width: UIScreen.main.bounds.width, alignment: topleading)

background (ColorConstants.BlueGray900)

.padding(.top, getRelativeHeight(30.0)).

padding(.bottom, getRelativeHeight(10.0))

}

frame (width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)

background (ColorConstants.BlueGray900)

.ignoresSafeArea()

hideNavigationBar()

}

struct BULBView_Previews: PreviewProvider {

static var previews: some View (

BULBView()
}
}
